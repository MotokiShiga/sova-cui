import os
import numpy as np

from .. import data
from .input_file import InputFile
from .io_utils import FileError
from ...computation.utils import matrix2lattice

class CFGFile(InputFile):
    """Class for cfg files

    Sub-class of `InputFile` to load cfg files generated by RMC codes.
    
    Attributes
    ----------
    path : string
        Absolute path to a structure file
    _info : core.data.FileInfo object
        Meta data including #frames, unit cell info (volume)
    has_info : bool
        If the structure infomation has been already read
    elements : list of str
        List of atomic symbols in the structure
    """
    def __init__(self, path):
        """Initialization

        Parameters
        ----------
        path : string
            Absolute path to a structure file
        """
        super().__init__(path)
        self.elements = None  #Atomic elements data 
        f = open(self.path, "r")
        f.close()
    
    def read_info(self):
        """Read cell data

        Read unit cell (lattice) data from the structure data file

        Raises
        ------
        FileError
            Error when the file cannot be read.
        """
        try:
            self._info.num_frames = 0
            # Open structure data
            with open(self.path.encode("utf-8"), 'r') as f:
                try:
                    # RMC version info
                    ver = f.readline()
                    # Data title
                    title = f.readline()

                    # Skip blank lines
                    line = f.readline()
                    item = line.split()
                    while len(item) == 0:
                        line = f.readline()
                        item = line.split()

                    # The number of atoms that moves generated, tried, accepted      
                    ngen, ntried, nacc = item[:3]
                    ngen = int(ngen)
                    ntried = int(ntried)
                    nacc = int(nacc)
                    # The times of configurations saved
                    nsaved = int(f.readline().split()[0])
                    # Skip a blank line
                    f.readline()

                    # The number of total atoms
                    num_atoms = int(f.readline().split()[0])
                    # The number of atom (molecule) types
                    nmol_types = int(f.readline().split()[0])
                    # The largest number of atoms in a molecule
                    nsites_max = int(f.readline().split()[0])
                    # The number that euler angles are provided 
                    neuler = int(f.readline().split()[0])
                    # Skip a blank line
                    f.readline()

                    # Metadata of cell (simulation box)
                    items = f.readline().split()
                    if items[0] == 'F':
                        truncated = False
                    elif items[0] == 'T':
                        truncated = True
                    # Read a comment line
                    f.readline()
                    
                    # Lattice vectors
                    lattice_vectors = np.identity(3)
                    for i in range(3):
                        line = f.readline()
                        xyz = np.fromstring(line, dtype=float, sep=' ') 
                        lattice_vectors[i] = xyz
                    # Skip a blank line
                    f.readline()

                    # The number of each types of atoms, number of sites (?), site info (?)                    
                    ni, nsites, sites = [], [], []
                    for i in range(nmol_types):
                        line = f.readline()
                        ni.append(int(line.split()[0]))
                        line = f.readline()
                        n = int(line.split()[0])
                        nsites.append(n)
                        s = []
                        for k in range(n):
                            line = f.readline()
                            s.append(np.fromstring(line, dtype=float, sep=' '))
                        sites.append(s)
                        f.readline()
                    
                    # Save atom information
                    self._info.nmol_types = nmol_types
                    self._info.ni = ni

                    self._info.num_frames += 1
                    if self._info.num_frames == 1:      
                        # Compute lattice constants using lattice vectors 
                        # (Double vectors because the lengths in cfg are half)
                        a, b, c, alpha, beta, gamma = matrix2lattice(lattice_vectors*2)

                        # Set the string about cell (volume) data                            
                        volume_info = None
                        if a == b and b == c and alpha == 90. and alpha == beta and beta == gamma:
                            # Cubic
                            volume_info = 'CUB %f' % a
                        elif a != b and b != c and c != a and alpha == 90. and alpha == beta and beta == gamma:
                                # Orthorhombic
                            volume_info = 'ORT %f %f %f' % (a, b, c)
                        elif a != b and b != c and c != a and alpha == 90. and alpha != beta and alpha == gamma:
                                # Monoclinic
                            volume_info = 'MON %f %f %f %f' % (a, b, c, np.radians(beta))
                        elif a != b and a == c and alpha == 90. and alpha == beta and beta == gamma:
                                # Tetragonal
                            volume_info = 'TET %f %f' % (a, c)
                        elif a != b and b != c and c != a and alpha != beta and beta != gamma and gamma != alpha:
                            # Triclinic
                            volume_info = 'TRI %f %f %f %f %f %f' % (a, b, c, np.radians(alpha), np.radians(beta), np.radians(gamma))
                        elif a == b and b == c and alpha != 90. and alpha == beta and beta == gamma: 
                            # Trigonal
                            volume_info = "RHO %f %f" % (a, np.radians(alpha))
                        else:
                            print('Warning: Cell information is NOT valid!')
                            raise Exception
                        self._info.volumestr = volume_info
                except StopIteration:
                    pass
            self.has_info = True
        except IOError:
            raise
        except Exception as e:
            raise FileError("Cannot read file info.", e)
            
    def readelements(self, nmol_types):
        """_summary_

        Parameters
        ----------
        nmol_types : _type_
            _description_
        """
        elem_file = os.path.splitext(self.path)[0] + '.elm'
        self.elements = None
        if os.path.exists(elem_file) == True:
            try:
                self.elements = []
                with open(elem_file.encode("utf-8"), 'r') as f:
                    for i in range(nmol_types):
                        self.elements.append(f.readline().strip())
            except FileNotFoundError:
                print('File Not Found : ', elem_file)
    
    def read_atoms(self, frame, elements=None):
        """Read structure data

        Read structure data from the xyz file and generate a Atoms object

        Parameters
        ----------
        frame : int
            Frame index
        elements : list of str, optional
            List of atomic symbols in the structure, by default None

        Returns
        -------
        atoms : core.data.Atoms object
            Atoms object that contains cell and atomic configuration data

        Raises
        ------
        IndexError
            _description_
        IndexError
            _description_
        FileError
            _description_
        """
        self.elements = elements 
        try:
            if self.info.num_frames <= frame:
                raise IndexError("Frame {} not found".format(frame))
            with open(self.path.encode("utf-8"), 'r') as f:
                try:
                    # RMC version info
                    ver = f.readline()
                    # Data title
                    title = f.readline()

                    # Skip blank lines
                    line = f.readline()
                    item = line.split()
                    while len(item) == 0:
                        line = f.readline()
                        item = line.split()

                    # The number of atoms that moves generated, tried, accepted      
                    ngen, ntried, nacc = item[:3]
                    ngen = int(ngen)
                    ntried = int(ntried)
                    nacc = int(nacc)
                    # The times of configurations saved
                    nsaved = int(f.readline().split()[0])
                    # Skip a blank line
                    f.readline()

                    # The number of total atoms
                    num_atoms = int(f.readline().split()[0])
                    # The number of atom (molecule) types
                    nmol_types = int(f.readline().split()[0])
                    # The largest number of atoms in a molecule
                    nsites_max = int(f.readline().split()[0])
                    # The number that euler angles are provided 
                    neuler = int(f.readline().split()[0])
                    # Skip a blank line
                    f.readline()

                    # Metadata of cell (simulation box)
                    items = f.readline().split()
                    if items[0] == 'F':
                        truncated = False
                    elif items[0] == 'T':
                        truncated = True
                    # Read a comment line
                    f.readline()
                    
                    # Lattice vectors
                    half_lattice_vectors = np.identity(3)
                    for i in range(3):
                        line = f.readline()
                        xyz = np.fromstring(line, dtype=float, sep=' ') 
                        half_lattice_vectors[i] = xyz
                    # Skip a blank line
                    f.readline()

                    # The number of each types of atoms, number of sites (?), site info (?)                    
                    ni, nsites, sites = [], [], []
                    for i in range(nmol_types):
                        line = f.readline()
                        ni.append(int(line.split()[0]))
                        line = f.readline()
                        n = int(line.split()[0])
                        nsites.append(n)
                        s = []
                        for k in range(n):
                            line = f.readline()
                            s.append(np.fromstring(line, dtype=float, sep=' '))
                        sites.append(s)
                        f.readline()
                                                        
                    # Get atomic symbols and positions
                    symbols, positions = [], []
                    for i in range(nmol_types):
                        for j in range(ni[i]): # ni[i]: the number of the i-th atom
                            # Add atomic symbols
                            symbol = self.elements[i]
                            symbols.append(symbol)

                            # Get an atomic position
                            line = f.readline()
                            x, y, z = line.split()
                            # Fractional coordinate
                            # (The range of positional values are between -1 and +1 in cfg files.)
                            v = np.array([float(x), float(y), float(z)])
                            # Convert fractional coordinate to Cartesian
                            position = np.dot(v, half_lattice_vectors) 
                            positions.append(position)
                    
                    # Set the origin of the coordinate system
                    self.info.volume.origin[0] = -half_lattice_vectors[0][0]
                    self.info.volume.origin[1] = -half_lattice_vectors[1][1]
                    self.info.volume.origin[2] = -half_lattice_vectors[2][2]

                    # Generate Atoms object from the stcuture data
                    atoms = data.Atoms(positions, None, symbols, self.info.volume, True)
                    # Save structure data described in the structure data
                    atoms.original_file_data = data.OriginalStructureData(self.path)
                    
                except StopIteration:
                    raise IndexError("Frame {} not found".format(frame))
            return atoms
        except (IOError, IndexError):
            raise
        except Exception as e:
            raise FileError("Cannot read atom data.", e)
            
    #Deprecated
    # @staticmethod
    # def write(result,filepath):
    #     with open(filepath, mode='w') as f:
    #         f.write("(Version 3 format configuration file)\n")
    #         f.write(" From " + result.filepath)
    #         f.write('\n\n')            
    #         f.write(" ")
    #         f.write("{:>10d}".format(0))
    #         f.write("{:>10d}".format(0))
    #         f.write("{:>10d}".format(0))
    #         f.write(" moves generated, tried, accepted\n")
    #         f.write(" ")
    #         f.write("{:>10d}".format(0))
    #         f.write("                     configurations saved\n\n")
    #         f.write(" ")
    #         nmol = result.atoms.number
    #         vectors = result.atoms.volume.vectors
    #         ni = []            
    #         for k, v in collections.Counter(result.atoms.elements).items():
    #             ni.append(v)
    #         nmol_types = len(ni)
    #         truncated = False
    #         #print(c)            
    #         f.write("{:>10d}".format(nmol))
    #         f.write(" molecules (of all types)\n")
    #         f.write(" ")
    #         f.write("{:>10d}".format(nmol_types))
    #         f.write(" types of molecule\n")
    #         f.write(" ")
    #         f.write("{:>10d}".format(0))
    #         f.write(" is the largest number of atoms in a molecule\n")
    #         f.write(" ")
    #         f.write("{:>10d}".format(0))
    #         f.write(" Euler angles are provided\n\n")
    #         f.write("          ")
    #         if truncated == True:
    #             f.write('T')
    #         else:
    #             f.write('F')
    #         f.write(" (Box is not truncated octahedral)\n")
    #         f.write("           ")
    #         f.write(" Defining vectors are:\n")            
    #         for i in range(3):
    #             f.write("           ")
    #             f.write('{:11.06f}'.format(round(vectors[i][0],7)))
    #             f.write('{:11.06f}'.format(round(vectors[i][1],7)))
    #             f.write('{:11.06f}\n'.format(round(vectors[i][2],7)))
    #         f.write('\n')
            
    #         for i in range(nmol_types):
    #             f.write("{:>11d}".format(ni[i]))
    #             f.write(" molecules of type")
    #             f.write("{:>3d}\n".format(i+1))
    #             f.write("{:>11d}".format(1))
    #             f.write(" atomic sites\n")
    #             f.write("           ")
    #             f.write('{:11.06f}'.format(0))
    #             f.write('{:11.06f}'.format(0))
    #             f.write('{:11.06f}'.format(0))
    #             f.write('\n\n')
            
    #         for i in range(nmol):
    #             f.write('{:11.07f}'.format(result.atoms.norm_positions[i][0]))
    #             f.write('{:11.07f}'.format(result.atoms.norm_positions[i][1]))
    #             f.write('{:11.07f}\n'.format(result.atoms.norm_positions[i][2]))